{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","toFixed","defaultProps","aboutText","Alert","alert","class","role","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.105af744.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { a } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <div className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-a active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-a\" href=\"/about\">{props.aboutText}</a>\r\n                            </li> */}\r\n                        </div>\r\n                        <div className={`form-check form-switch text-${props.mode  === 'light' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n            //Set prps type\r\n            Navbar.propTypes = {\r\n                title: PropTypes.string.isRequired,\r\n            aboutText: PropTypes.string\r\n}\r\n\r\n            //if props value missed\r\n            Navbar.defaultProps = {\r\n                title: \"Title here\",\r\n            aboutText: \"About\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text conveted to upper case\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text conveted to lower case\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text is coppied to clipboard\", \"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        var newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n        props.showAlert(\"Extra space removed\", \"success\");\r\n        }\r\n            \r\n    const [text, setText] = useState(\"Enter text here\");\r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new Text\") // Correct way to change the state\r\n    \r\n    return (\r\n        <>\r\n        <div style={{color : props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n            <h3>{props.heading}</h3>\r\n            <div className=\"container my-3\">\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" onChange={handleOnChange} style={{backgroundColor: props.mode === \"dark\" ? \"#374789\": \"white\" \r\n                    }} id=\"myBox\" rows=\"10\" value={text}></textarea>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n                Covert To UpperCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n                Covert To LowerCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n                Copy Text\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n                Revmove Extra space \r\n            </button>\r\n        </div>\r\n            <div style={{color : props.mode === \"dark\" ? \"white\" : \"black\"}} className=\"container my-3\">\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(' ').length} word and {text.length} character</p>\r\n            <p>{(text.split(' ').length * 0.008).toFixed(2)} read Time</p>\r\n            <h2>Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert != null &&<div>\r\n            <div class={`alert alert-${props.alert.type} alert-dismissible`} role=\"alert\" id=\"liveAlert\">\r\n                <strong>{props.alert.msg}</strong>\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport Text from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport './App.css';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#374789\";\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode is enabled\", \"success\");\n    }\n  }\n  return (\n    // <Router>\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About\" /> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route path=\"/\"> */}\n            <Text showAlert={showAlert} mode={mode} heading=\"Enter the text to analyze\" />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n    </>\n    // </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}